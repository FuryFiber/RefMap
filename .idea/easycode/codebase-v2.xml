<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/src/core/map.rs;/home/flor/Documents/dev/refmap/src/core/mod.rs;/home/flor/Documents/dev/refmap/src/core/pdfparser.rs;/home/flor/Documents/dev/refmap/src/core/storage.rs;/home/flor/Documents/dev/refmap/src/core/undo.rs;/home/flor/Documents/dev/refmap/src/app.rs;/home/flor/Documents/dev/refmap/src/main.rs;/home/flor/Documents/dev/refmap/test.json" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;/home/flor/Documents/dev/refmap&quot;:&quot;{\&quot;/src/core/storage.rs\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`save_map`: Saves a `MindMap` to a file at the specified path.\\n\\n`load_map`: Loads a `MindMap` from a file at the specified path.\\n\\nThis file provides utility functions for saving and loading a `MindMap` to and from a file using the `serde_json` library.\&quot;,\&quot;/src/core/pdfparser.rs\&quot;:\&quot;This file defines a `Metadata` struct and an associated `from_file` function.\\n\\n`Metadata`: A struct that represents the metadata of a PDF file, including the title, keywords, authors, creation date, and file path.\\n\\n`from_file`: A function that takes a file path as input and returns a `Metadata` struct containing the metadata extracted from the PDF file using the `pdfinfo` command.\&quot;,\&quot;/src/core/map.rs\&quot;:\&quot;This file defines a data structure for a mind map, which is a graphical representation of ideas and their relationships. The file contains the following classes and functions:\\n\\n`Node`: A node in the mind map, representing a piece of information, with a title, metadata, position, and other properties.\\n\\n`Edge`: A connection between two nodes in the mind map.\\n\\n`MindMap`: The main data structure that holds the nodes and edges of the mind map, and provides methods to add, remove, and manipulate the nodes and edges.\\n\\n`add_node`: Adds a new node to the mind map with the given title, position, and metadata.\\n\\n`add_pdf_node`: Adds a new node to the mind map based on the metadata extracted from a PDF file.\\n\\n`add_edge`: Adds a new edge between two nodes in the mind map.\\n\\n`remove_node`: Removes a node and all its associated edges from the mind map.\&quot;,\&quot;/test.json\&quot;:\&quot;This file appears to be a JSON representation of a graph data structure, which consists of nodes and edges. It does not contain any classes or functions. The file represents a graph with three nodes and three edges connecting them. The nodes have metadata associated with them, such as a title, keywords, authors, and a file path. The edges represent relationships between the nodes. This file seems to be used for visualizing and analyzing a graph-based data structure, potentially in the context of a research paper or a project related to Internet of Things, wireless sensor networks, or cyber-physical systems.\&quot;,\&quot;/src/app.rs\&quot;:\&quot;This file contains the implementation of the `MindMapApp` struct and its associated methods. It provides a mind mapping application built using the `egui` library.\\n\\n`MindMapApp`: A struct that represents the state and functionality of the mind mapping application.\\n\\n`MindMapApp::menu_bar`: Renders the menu bar with options for creating a new map, opening an existing map, and saving the current map.\\n\\n`MindMapApp::default`: The default implementation for the `MindMapApp` struct, which initializes the mind map and other state variables.\\n\\n`MindMapApp::update`: The main update function that handles user interactions, rendering the mind map, and managing the application state.\\n\\n`point_line_distance`: A helper function that calculates the distance between a point and a line segment.\&quot;,\&quot;/src/core/undo.rs\&quot;:\&quot;There are no classes or functions in the provided document. The document appears to be an empty XML document, which does not contain any meaningful content.\&quot;,\&quot;/src/core/mod.rs\&quot;:\&quot;This file appears to be a Rust module that defines a `MindMap` data structure and related functionality. It does not contain any explicit class definitions, but rather defines several modules and functions. Here\\u0027s a summary of the contents:\\n\\n`map`: This module likely contains the implementation of the `MindMap` data structure and related operations.\\n\\n`storage`: This module likely handles the storage and persistence of `MindMap` data.\\n\\n`pdfparser`: This module is likely responsible for parsing PDF documents and extracting information to be used in the `MindMap` data structure.\\n\\n`MindMap`: This is the main data structure provided by this module, which likely represents a mind map or similar hierarchical data structure.\&quot;,\&quot;/src/main.rs\&quot;:\&quot;This file does not contain any classes or functions. Instead, it sets up the main entry point for a mind map application using the `eframe` crate. The `main` function initializes the application with default options and runs the native application loop, passing in a new instance of the `MindMapApp` as the application state.\&quot;}&quot;,&quot;/home/flor/Documents/Dev/RefMap&quot;:&quot;{\&quot;/src/core/storage.rs\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`save_map`: Saves a `MindMap` to a file at the specified path.\\n\\n`load_map`: Loads a `MindMap` from a file at the specified path.\\n\\nThis file provides utility functions to save and load a `MindMap` to and from a file using the `serde_json` library.\&quot;,\&quot;/src/core/pdfparser.rs\&quot;:\&quot;This file defines a `Metadata` struct and an associated `from_file` function.\\n\\n`Metadata`: A struct that represents the metadata of a PDF file, including the title, keywords, authors, creation date, and file path.\\n\\n`from_file`: A function that takes a file path as input and returns a `Metadata` struct containing the metadata extracted from the PDF file using the `pdfinfo` command.\&quot;,\&quot;/src/core/map.rs\&quot;:\&quot;This file defines the data structures and functions for a mind map application. It includes the following classes and functions:\\n\\n`Node`: Represents a node in the mind map, containing information such as its ID, title, metadata, position, and annotations.\\n\\n`Edge`: Represents an edge in the mind map, connecting two nodes and containing information about the edge type and annotations.\\n\\n`EdgeType`: An enum representing the different types of edges in the mind map, such as \\\&quot;Normal\\\&quot; and \\\&quot;References\\\&quot;.\\n\\n`MindMap`: Represents the entire mind map, containing a collection of nodes and edges, and providing functions to add, remove, and manage the nodes and edges.\\n\\n`add_node`: Adds a new node to the mind map with the given title, x, and y coordinates.\\n\\n`add_pdf_node`: Adds a new node to the mind map based on the metadata extracted from a PDF file.\\n\\n`add_edge`: Adds a new edge to the mind map, connecting two nodes.\\n\\n`remove_node`: Removes a node from the mind map, along with any edges connected to that node.\&quot;,\&quot;/test.json\&quot;:\&quot;This file appears to be a JSON representation of a graph data structure, which consists of nodes and edges. It does not contain any classes or functions. The file represents a graph with three nodes and three edges connecting them. The nodes have metadata associated with them, such as a title, keywords, authors, and a file path. The edges represent connections between the nodes. This file seems to be used for visualizing and analyzing a graph-based data structure, potentially related to a research paper or a technical document.\&quot;,\&quot;/src/app.rs\&quot;:\&quot;This file defines a `MindMapApp` struct that represents a mind map application. It handles the user interface, data management, and various interactions with the mind map. The file also includes helper structs and functions to support the functionality of the mind map application.\\n\\n`MindMapApp`: A struct that represents the mind map application and manages its state and functionality.\\n\\n`menu_bar`: Displays the application\\u0027s menu bar, allowing the user to perform actions such as creating a new mind map, opening an existing one, and saving the current mind map.\\n\\n`show_node_context_menu`: Displays a context menu when a node is right-clicked, providing options to edit the node\\u0027s metadata, view annotations, add annotations, and delete the node.\\n\\n`show_annotations_panel`: Displays a panel that shows the annotations associated with a selected node or edge, allowing the user to view, add, and edit annotations.\\n\\n`show_annotation_card`: Displays a card-like UI element for an individual annotation, including options to edit or delete the annotation.\\n\\n`show_annotation_dialog`: Displays a dialog window for adding or editing an annotation, allowing the user to set the annotation type, title, content, and page number (for PDF annotations).\\n\\n`start_editing_annotation`: Initializes the edit annotation dialog with the data from a selected annotation.\\n\\n`save_annotation`: Saves the changes made to an annotation, either by updating an existing one or creating a new one.\\n\\n`start_editing`: Initializes the edit metadata dialog with the data from a selected node.\\n\\n`save_edited_metadata`: Saves the changes made to a node\\u0027s metadata.\\n\\n`finalize_edge`: Completes the creation of a new edge between two nodes, allowing the user to select the edge type.\\n\\n`show_edge_context_menu`: Displays a context menu when an edge is right-clicked, providing options to change the edge type, add annotations, view annotations, and delete the edge.\\n\\n`get_node_rect`: Calculates the bounding rectangle for a node based on its size, which depends on whether the node is collapsed or expanded.\\n\\n`point_line_distance`: Calculates the distance between a point and a line segment.\&quot;,\&quot;/src/core/undo.rs\&quot;:\&quot;There are no classes or functions in the provided document. The document appears to be an empty XML document, which does not contain any meaningful content.\&quot;,\&quot;/README.md\&quot;:\&quot;This file appears to be a user manual for the RefMap application, which is a mind mapping tool for organizing research papers. It does not contain any classes or functions, but rather provides a detailed overview of the application\\u0027s features and usage. The manual covers topics such as creating new mind maps, adding and connecting nodes, editing nodes and annotations, managing the mind map, saving and loading, and troubleshooting.\&quot;,\&quot;/src/core/mod.rs\&quot;:\&quot;This file appears to be a Rust module that defines three sub-modules: `map`, `storage`, and `pdfparser`. It also re-exports the `MindMap` type from the `map` module.\\n\\n`MindMap`: A type that represents a mind map, likely used for organizing and visualizing information.\\n\\nThe file does not appear to define any functions directly. Instead, it serves as a container for the three sub-modules, which likely contain the actual implementation of the mind map functionality.\&quot;,\&quot;/src/main.rs\&quot;:\&quot;This file does not contain any classes or functions. Instead, it sets up the main entry point for a mind map application using the `eframe` crate. The `main` function initializes the application with default options and runs the native application loop, creating an instance of the `MindMapApp` struct.\\n\\nThe file imports two modules: `core` and `app`. The `MindMapApp` struct is likely defined in the `app` module, which is then used to create the application instance in the `main` function.\&quot;}&quot;}" />
    <option name="fileSkeletonMaps" value="{&quot;/home/flor/Documents/Dev/RefMap&quot;:&quot;{\&quot;/src/core/map.rs\&quot;:{\&quot;file_path\&quot;:\&quot;/src/core/map.rs\&quot;,\&quot;file_name\&quot;:\&quot;map.rs\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/core/mod.rs\&quot;:{\&quot;file_path\&quot;:\&quot;/src/core/mod.rs\&quot;,\&quot;file_name\&quot;:\&quot;mod.rs\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/core/pdfparser.rs\&quot;:{\&quot;file_path\&quot;:\&quot;/src/core/pdfparser.rs\&quot;,\&quot;file_name\&quot;:\&quot;pdfparser.rs\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/core/storage.rs\&quot;:{\&quot;file_path\&quot;:\&quot;/src/core/storage.rs\&quot;,\&quot;file_name\&quot;:\&quot;storage.rs\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/core/undo.rs\&quot;:{\&quot;file_path\&quot;:\&quot;/src/core/undo.rs\&quot;,\&quot;file_name\&quot;:\&quot;undo.rs\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/app.rs\&quot;:{\&quot;file_path\&quot;:\&quot;/src/app.rs\&quot;,\&quot;file_name\&quot;:\&quot;app.rs\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main.rs\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main.rs\&quot;,\&quot;file_name\&quot;:\&quot;main.rs\&quot;,\&quot;methods\&quot;:[]},\&quot;/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/test.json\&quot;:{\&quot;file_path\&quot;:\&quot;/test.json\&quot;,\&quot;file_name\&quot;:\&quot;test.json\&quot;,\&quot;methods\&quot;:[]}}&quot;}" />
  </component>
</project>